package cs.arizona.edu.topedgeweightfilter;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.filters.spi.FilterProperty;
import org.openide.util.WeakListeners;

/**
 *
 * @author iychoi
 */
public class TopEdgeWeightFilterPanel extends javax.swing.JPanel implements ChangeListener {

    private TopEdgeWeightFilter filter;
    
    /**
     * Creates new form TopEdgeWeightFilterPanel
     */
    public TopEdgeWeightFilterPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlbl_pernode = new javax.swing.JLabel();
        jchk_pernode = new javax.swing.JCheckBox();
        jlbl_topn = new javax.swing.JLabel();
        jspn_topn = new javax.swing.JSpinner();

        setLayout(new java.awt.GridLayout(2, 2));

        org.openide.awt.Mnemonics.setLocalizedText(jlbl_pernode, org.openide.util.NbBundle.getMessage(TopEdgeWeightFilterPanel.class, "TopEdgeWeightFilterPanel.jlbl_pernode.text")); // NOI18N
        add(jlbl_pernode);

        org.openide.awt.Mnemonics.setLocalizedText(jchk_pernode, org.openide.util.NbBundle.getMessage(TopEdgeWeightFilterPanel.class, "TopEdgeWeightFilterPanel.jchk_pernode.text")); // NOI18N
        add(jchk_pernode);

        org.openide.awt.Mnemonics.setLocalizedText(jlbl_topn, org.openide.util.NbBundle.getMessage(TopEdgeWeightFilterPanel.class, "TopEdgeWeightFilterPanel.jlbl_topn.text")); // NOI18N
        add(jlbl_topn);

        jspn_topn.setToolTipText(org.openide.util.NbBundle.getMessage(TopEdgeWeightFilterPanel.class, "TopEdgeWeightFilterPanel.jspn_topn.toolTipText")); // NOI18N
        jspn_topn.setMinimumSize(new java.awt.Dimension(150, 28));
        jspn_topn.setPreferredSize(new java.awt.Dimension(150, 28));
        add(jspn_topn);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jchk_pernode;
    private javax.swing.JLabel jlbl_pernode;
    private javax.swing.JLabel jlbl_topn;
    private javax.swing.JSpinner jspn_topn;
    // End of variables declaration//GEN-END:variables

    public void setup(TopEdgeWeightFilter filter) {
        this.filter = filter; 
        
        this.jchk_pernode.addChangeListener(WeakListeners.change(this, this.jchk_pernode));
        this.jspn_topn.addChangeListener(WeakListeners.change(this, this.jspn_topn));
        
        // set default
        this.jchk_pernode.setSelected(false);
        this.jspn_topn.setValue(-1);
    }

    @Override
    public void stateChanged(ChangeEvent ce) {
        if(ce.getSource() == this.jchk_pernode) {
            boolean perNode = this.jchk_pernode.isSelected();
            updateValues(perNode);
        } else if(ce.getSource() == this.jspn_topn) {
            int topN = (Integer)this.jspn_topn.getValue();
            updateValues(topN);
        }
    }
    
    private synchronized void updateValues(boolean perNode) {
        if(this.filter != null && this.filter.getProperties() != null) {
            FilterProperty[] properties = this.filter.getProperties();
            if(properties.length == 2) {
                FilterProperty pernode = properties[0]; 
                try { 
                    pernode.setValue(Boolean.valueOf(perNode)); 
                } catch (Exception e) {
                    e.printStackTrace();
                } 
                
                FilterProperty top = properties[1]; 
                try { 
                    top.setValue((Integer)this.jspn_topn.getValue()); 
                } catch (Exception e) {
                    e.printStackTrace();
                } 
            }
        }
    }
    
    private synchronized void updateValues(int topN) {
        if(this.filter != null && this.filter.getProperties() != null) {
            FilterProperty[] properties = this.filter.getProperties();
            if(properties.length == 2) {
                FilterProperty pernode = properties[0]; 
                try { 
                    pernode.setValue(Boolean.valueOf(this.jchk_pernode.isSelected())); 
                } catch (Exception e) {
                    e.printStackTrace();
                } 
                
                FilterProperty top = properties[1]; 
                try { 
                    top.setValue(Integer.valueOf(topN)); 
                } catch (Exception e) {
                    e.printStackTrace();
                } 
            }
        }
    }
}
